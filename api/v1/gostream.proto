syntax = "proto3";

package com.lordvidex.gostream.v1;
option go_package = "github.com/lordvidex/gostream/pkg/api/gostream/v1;gostreamv1";

import "google/api/annotations.proto";

service WatchersService {
  // Watch connects to server streams
  rpc Watch(WatchRequest) returns (stream WatchResponse) {}
  // Advertise returns the server stats useful for client-side loadbalancing
  rpc Advertise(AdvertiseRequest) returns (AdvertiseResponse) {
    option (google.api.http) = {
      get: "/watch/advertise"
    };
  }
}

service PetService {
  rpc CreatePet(CreatePetRequest) returns (CreatePetResponse) {
    option (google.api.http) = {
      post: "/pet"
      body: "*"
    };
  }
  rpc UpdatePet(UpdatePetRequest) returns (UpdatePetResponse) {
    option (google.api.http) = {
      put: "/pet/{pet_id}"
      body: "*"
    };
  }
  rpc ListPets(ListPetsRequest) returns (ListPetsResponse) {
    option(google.api.http) = {
      get: "/pet"
    };
  }
}

service UserService {
  rpc CreateUser(CreateUserRequest) returns (CreateUserResponse) {
    option (google.api.http) = {
      post: "/user"
      body: "*"
    };
  }
  rpc UpdateUser(UpdateUserRequest) returns (UpdateUserRequest) {
    option (google.api.http) = {
      put: "/user/{user_id}"
      body: "*"
    };
  }
  rpc ListUsers(ListUsersRequest) returns (ListUsersResponse) {
    option(google.api.http) = {
      get: "/user"
    };
  }
}

message CreatePetRequest {
  Pet pet = 1;
}

message CreatePetResponse {
  uint64 id = 1;
}

message UpdatePetRequest {
  uint64 pet_id = 1;
  Pet  new_data = 2;
}

message UpdatePetResponse {}

message ListPetsRequest {
  // TODO: add filters
}

message ListPetsResponse {
  repeated Pet pets = 1;
  // TODO: add page metadata
}

message CreateUserRequest {
  User user = 1;
}

message CreateUserResponse {
  uint64 id = 1;
}

message UpdateUserRequest {
  uint64 user_id = 1;
  User new_data = 2;
}

message UpdateUserResponse {}

message ListUsersRequest {}
message ListUsersResponse {
  repeated User users = 1;
}

message WatchRequest {
  repeated Entity entity = 1; // UNSPECIFIED will send updates of any entity
  optional string identifier = 2; // optional identifier returned in server stats
}

message WatchResponse {
  EventKind kind = 1;
  oneof data {
    WatchSnapshot snapshot = 2;
    WatchData update       = 3;
  }

  message WatchSnapshot {
    repeated WatchData snapshot = 1;
  }

  message WatchData {
    Entity entity = 1;
    oneof data {
      Pet pet   = 2;
      User user = 3;
    }
  }
}

message AdvertiseRequest {
  repeated ServerMetric metrics = 1;
}

message AdvertiseResponse {
  repeated ServerMetricResponse response = 1;

  message ServerMetricResponse {
    ServerMetric metric = 1;
    double value = 2;
  }
}

enum EventKind {
  EVENT_KIND_UNSPECIFIED = 0;
  EVENT_KIND_SNAPSHOT    = 1; // full data
  EVENT_KIND_UPDATE      = 2; // only partial updated data
}

enum Entity {
  ENTITY_UNSPECIFIED = 0;
  ENTITY_PET         = 1;
  ENTITY_USER        = 2;
}

enum ServerMetric {
  SERVER_METRIC_UNSPECIFIED = 0;
  SERVER_METRIC_STREAMS = 1;
  SERVER_METRIC_GOROUTINES = 2;
}

message Pet {
  uint64 id   = 1;
  string kind = 2; // cats, dogs, rabbits
  string name = 3;
  uint32 age  = 4;
}

message User {
  uint64 id          = 1;
  string name        = 2;
  uint32 age         = 3;
  string nationality = 4;
}
